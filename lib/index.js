module.exports=function a(b){const c=Array.isArray(b),d=c?(h)=>[...h]:(h)=>Object.assign({},h),e=()=>{throw new Error(`${c?'array':'object'} is immutable`)},f=(h)=>(...i)=>{const j='push pop shift unshift'.includes(h),l='reverse sort splice fill copyWithin'.includes(h),m='filter map concat slice'.includes(h),n=m?b:d(b),p=n[h](...i),q=l||m?a(p):p;return j?[q,a(n)]:q},g={$set(h,i){const j=d(b);return j[h]=i,a(j)},$unset(h){if(c&&Number.isInteger(h)&&0<=h)return a([...b.slice(0,h),...b.slice(h+1)]);const i=d(b);return delete i[h],a(i)}};if('object'!=typeof b||!b)throw new Error('mewt accepts array or object');return b=function(i){let j=c?Object.keys:Object.getOwnPropertyNames;return j(c?[...i]:i).reduce((l,m)=>{let n=i[m];return l[m]=n&&'object'==typeof n?a(n):n,l},c?[]:{})}(d(b)),new Proxy(b,{get(h,i){return g[i]||b[i]&&({}.hasOwnProperty.call(b,i)?b[i]:f(i))},defineProperty:e,deleteProperty:e,setPrototypeOf:e})};