function mewt(a){const e=Array.isArray(a),f=e?(i)=>[].concat(i):(i)=>Object.assign({},i),g=(i)=>(...j)=>{const k='reverse sort splice fill copyWithin'.includes(i),l='filter map concat slice'.includes(i),m=l?a:f(a),n=m[i](...j),o=k||l?mewt(n):n;return'push pop shift unshift'.includes(i)?[o,mewt(m)]:o},h={$set:(i,j)=>{const k=f(a);return k[i]=j,mewt(k)},$unset:(i)=>{const j=f(a);return delete j[i],mewt(j)}};if(!e&&'object'!=typeof a)throw new Error('mewt accepts array or object');return new Proxy(a,{set:()=>{throw new Error(`${e?'array':'object'} is immutable`)},get:(i,j)=>{return h[j]?h[j]:a[j]&&({}.hasOwnProperty.call(a,j)?a[j]:g(j))}})}module.exports=mewt;